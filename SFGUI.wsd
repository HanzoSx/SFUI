@startuml
' ========================================================
' UML Class Diagram for SFGUI Project (All Classes & Auxiliaries)
' Generated by ChatGPT; refine as needed
' ========================================================

skinparam classAttributeIconSize 0

package sfg {
' Core facade
class SFGUI {
\+ void Update(sf::RenderWindow&)
\+ Context::Ptr GetContext()
}


' Context and resources
class Context {
    + static Ptr Create(sf::RenderWindow&, ResourceManager&)
    + ResourceManager& GetResourceManager()
}
class ResourceManager {
    + Texture::Ptr LoadTexture(const std::string&)
    + Font::Ptr LoadFont(const std::string&)
}

' Rendering backend
class Engine {
    + void Render(Context::Ptr)
}
class Renderer {
    + void DrawWidget(Widget&)
}

' Abstract widget hierarchy
abstract class Widget {
    + virtual void Display()
    + virtual void HandleEvent(const sf::Event&)
    + sf::Vector2f GetRequisition() const
    + void SetAllocation(const sf::Vector2f&)
}
abstract class CompositeWidget {
    + void Add(std::shared_ptr<Widget>)
    + void Remove(std::shared_ptr<Widget>)
    + std::vector<std::shared_ptr<Widget>> GetChildren()
}
abstract class Container
abstract class Bin

' Core controls
class Window {
    + enum Style { TITLEBAR, RESIZE, CLOSE, MINIMIZE }
    + static Ptr Create(Style)
    + void SetTitle(const std::string&)
    + void Show()
}
class Canvas {
    + static Ptr Create(bool depth_buffer=false)
    + void SetRequisition(const sf::Vector2f&)
    + sf::Vector2f GetRequisition() const
    + sf::RenderTexture& GetTexture()
}
class Label {
    + static Ptr Create(const std::string&)
    + void SetText(const std::string&)
}
class Button {
    + static Ptr Create(const std::string&)
    + void SetLabel(const std::string&)
    + Signal::Ptr OnClick
}
class ToggleButton {
    + static Ptr Create(const std::string&)
    + void SetActive(bool)
    + Signal::Ptr OnToggle
}
class CheckButton
class RadioButton
class Entry {
    + static Ptr Create()
    + std::string GetText() const
    + Signal::Ptr OnTextChanged
}
class Adjustment {
    + static Ptr Create(float lower, float upper, float step)
    + void SetValue(float)
    + float GetValue() const
    + Signal::Ptr OnChange
}
class Scrollbar {
    + enum Orientation { HORIZONTAL, VERTICAL }
    + static Ptr Create(Orientation)
    + Adjustment::Ptr GetAdjustment()
}
class Scale {
    + static Ptr Create(Adjustment::Ptr)
}
class ProgressBar {
    + static Ptr Create(Adjustment::Ptr)
}
class ComboBox {
    + static Ptr Create()
    + void Append(const std::string&)
    + Signal::Ptr OnSelect
}
class Separator
class Box {
    + static Ptr Create(Orientation)
    + enum Orientation { HORIZONTAL, VERTICAL }
}
class Fixed {
    + static Ptr Create()
}
class Table {
    + static Ptr Create(unsigned int rows, unsigned int cols)
    + void Attach(Widget::Ptr, int left, int top, int right, int bottom)
}
class Notebook {
    + static Ptr Create()
    + void AppendPage(Widget::Ptr, Label::Ptr)
}
class Expander {
    + static Ptr Create(const std::string&)
    + Signal::Ptr OnToggle
}
class Paned {
    + static Ptr Create(Orientation)
    + enum Orientation { HORIZONTAL, VERTICAL }
    + void Pack1(Widget::Ptr, bool resize)
    + void Pack2(Widget::Ptr, bool shrink)
}
class ScrolledWindow {
    + static Ptr Create(Adjustment::Ptr, Adjustment::Ptr)
}

' Container specializations
CompositeWidget <|-- Container
Container <|-- Bin
Container <|-- Window
Container <|-- ScrolledWindow
Container <|-- Frame
Container <|-- Notebook
Container <|-- Paned
Container <|-- Table
Container <|-- Box
Container <|-- Fixed

' Widget implementations
Widget <|-- CompositeWidget
Widget <|-- Label
Widget <|-- Button
Widget <|-- ToggleButton
ToggleButton <|-- CheckButton
ToggleButton <|-- RadioButton
Widget <|-- Entry
Widget <|-- Scrollbar
Widget <|-- Scale
Widget <|-- ProgressBar
Widget <|-- ComboBox
Widget <|-- Separator
Widget <|-- Canvas
Widget <|-- Expander

' Signal mechanism
class Signal {
    + using Ptr = std::shared_ptr<Signal>
    + void Connect(std::function<void()>)
    + void Emit()
}

' Miscellaneous widgets
class MenuBar {
    + static Ptr Create()
    + void Append(MenuItem::Ptr)
}
class MenuItem {
    + static Ptr Create(const std::string&)
    + Signal::Ptr OnActivate
}
class ContextMenu {
    + static Ptr Create()
    + void Append(MenuItem::Ptr)
}
class FileChooser {
    + enum Action { OPEN, SAVE }
    + static Ptr Create(Action)
    + std::string ShowDialog()
}
class ListBox {
    + static Ptr Create()
    + void Append(const std::string&)
    + Signal::Ptr OnSelect
}
class TreeView {
    + static Ptr Create()
    + void Append(TreeModel::Ptr)
}
class TreeModel {
    + static Ptr Create()
    + void AppendNode(const std::string&)
}
class ImageView {
    + static Ptr Create(Texture::Ptr)
}
class Texture
class Font
class SignalProxy

' Relationships
Scrollbar --> Adjustment
Scale --> Adjustment
ProgressBar --> Adjustment
Scrollbar --> CompositeWidget : contains
Scale --> CompositeWidget : contains
Canvas --> CompositeWidget : contains

Context --> Engine
Engine --> Renderer
Renderer --> Widget
SFGUI --> Context
ResourceManager --> Texture
ResourceManager --> Font
MenuBar --> MenuItem
ContextMenu --> MenuItem


}
@enduml
